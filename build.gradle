config {
    info {
        description = 'Redis Cloud Autoscaler'
        inceptionYear = '2025'
        tags = ['redis', 'cloud', 'autoscaler', 'prometheus']

        links {
            website      = "https://github.com/redis-field-engineering/${project.rootProject.name}"
            issueTracker = "https://github.com/redis-field-engineering/${project.rootProject.name}/issues"
            scm          = "https://github.com/redis-field-engineering/${project.rootProject.name}.git"
        }

        scm {
            url                 = "https://github.com/redis-field-engineering/${project.rootProject.name}"
            connection          = "scm:git:https://github.com/redis-field-engineering/${project.rootProject.name}.git"
            developerConnection = "scm:git:git@github.com:redis-field-engineering/${project.rootProject.name}.git"
        }

        specification {
            enabled = true
        }

        implementation {
            enabled = true
        }

        people {
            clearDomainSet()
            person {
                id    = 'lorello'
                name  = 'Steve Lorello'
                roles = ['developer', 'author']
            }
        }
    }

    docs {
        javadoc {
            autoLinks {
                enabled = true
            }
        }
    }

    artifacts {
        source{
            enabled = true
        }
    }

    licensing {
        enabled = false


        licenses {
            clearDomainSet()
            license {
                name = 'MIT'
                url  = 'https://github.com/redis-field-engineering/redis-cloud-autoscaler/blob/main/LICENSE.md'
                primary = true
            }
        }
    }

    coverage {
        jacoco {
            enabled = true
            toolVersion = jacocoPluginVersion
        }
    }
}

allprojects {
    repositories {
        mavenLocal()
        gradlePluginPortal()
    }

//    tasks.withType(GenerateModuleMetadata) {
//        enabled = false
//    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

//    tasks.withType(JavaCompile).configureEach {
//        options.compilerArgs += ["-proc:only"]
//    }

    tasks.withType(JavaCompile).configureEach {
        options.annotationProcessorPath = configurations.annotationProcessor
    }

}

subprojects {


    config {
        info {
            description = project.project_description
        }
        coverage {
            jacoco {
                toolVersion = jacocoPluginVersion
            }
        }
    }

    license {
        exclude('build/**')
    }

    dependencies {
//        annotationProcessor 'redis.clients:jedis:5.2.0'
        implementation 'redis.clients:jedis'
        annotationProcessor 'com.redis.om:redis-om-spring:0.9.8'
        testImplementation 'org.junit.jupiter:junit-jupiter-api'
        testImplementation 'org.junit.jupiter:junit-jupiter-params'
        testImplementation 'org.junit.jupiter:junit-jupiter-engine'
        testImplementation 'org.junit.platform:junit-platform-launcher'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
    }

    test {
        useJUnitPlatform()
    }
}